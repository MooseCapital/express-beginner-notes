#!/usr/bin/env node

/**
 * Module dependencies.
 */

const {app} = require('../app');
const debug = require('debug')('express-beginner-notes:server');
const {createServer} = require('http');
const z = require('zod');
require('dotenv').config();
const {websocketServerConfig} = require('../websockets/websocket')
//Get port from environment and store in Express.
const port = normalizePort(process.env.PORT || '3000');
const {Server} = require('socket.io')
app.set('port', port);
const httpServer = createServer(app);

httpServer.on('error', onError);
httpServer.on('listening', onListening);
httpServer.listen(port);

const io = new Server(httpServer, {
    cors: process.env.NODE_ENV === "production" ?
    {origin: ["https://moosecapital.github.io",
    "http://localhost:5173","http://localhost:4173",
    "http://127.0.0.1:4173","http://127.0.0.1:5173"]} : {}
})

/* {
    cors: {
        origin: process.env.NODE_ENV === "production" ? ['https://moosecapital.github.io'] : ['*']
    }
}  */

websocketServerConfig(io);


/*

httpServer.on('upgrade', async (request, socket) => {
    console.log(`request:`, request.url)
    console.log(`socket:`, socket)
    let url = request.url;
    if (url.startsWith('/')) {
        url = url.substring(1);
    }
    console.log(`success:`, await z.string().uuid().safeParseAsync(url));
    /!* if (!(await z.string().uuid().safeParseAsync(url)).success) {
        socket.write('HTTP/1.1 401 Unauthorized\r\n\r\n');
        socket.destroy();
        return;
    } *!/
});
*/

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = httpServer.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
